diff --git a/Backends/Graphics5/Vulkan/Sources/kinc/backend/graphics5/Vulkan.c.h b/Backends/Graphics5/Vulkan/Sources/kinc/backend/graphics5/Vulkan.c.h
index 4cd387c9..66706ac1 100644
--- a/Backends/Graphics5/Vulkan/Sources/kinc/backend/graphics5/Vulkan.c.h
+++ b/Backends/Graphics5/Vulkan/Sources/kinc/backend/graphics5/Vulkan.c.h
@@ -53,6 +53,7 @@ int newRenderTargetHeight;
 VkDevice device;
 VkFormat format;
 VkRenderPass render_pass;
+VkDescriptorSet desc_set;
 VkPhysicalDevice gpu;
 VkCommandPool cmd_pool;
 VkQueue queue;
diff --git a/Backends/Graphics5/Vulkan/Sources/kinc/backend/graphics5/commandlist.c.h b/Backends/Graphics5/Vulkan/Sources/kinc/backend/graphics5/commandlist.c.h
index d804dacc..6f3dfbd8 100644
--- a/Backends/Graphics5/Vulkan/Sources/kinc/backend/graphics5/commandlist.c.h
+++ b/Backends/Graphics5/Vulkan/Sources/kinc/backend/graphics5/commandlist.c.h
@@ -11,13 +11,15 @@ extern PFN_vkQueuePresentKHR fpQueuePresentKHR;
 extern VkSwapchainKHR swapchain;
 extern VkQueue queue;
 extern VkFramebuffer *framebuffers;
+extern VkDescriptorSet desc_set;
 extern VkRenderPass render_pass;
 extern uint32_t current_buffer;
+extern VkDescriptorPool desc_pools[3];
 extern int depthBits;
 extern VkSemaphore presentCompleteSemaphore;
 extern kinc_g5_texture_t *vulkanTextures[16];
 extern kinc_g5_render_target_t *vulkanRenderTargets[16];
-VkDescriptorSet getDescriptorSet(void);
+void createDescriptorSet(VkDescriptorSet *desc_set);
 bool memory_type_from_properties(uint32_t typeBits, VkFlags requirements_mask, uint32_t *typeIndex);
 void setImageLayout(VkCommandBuffer _buffer, VkImage image, VkImageAspectFlags aspectMask, VkImageLayout oldImageLayout, VkImageLayout newImageLayout);
 VkCommandBuffer setup_cmd;
@@ -332,6 +334,8 @@ void kinc_g5_command_list_begin(kinc_g5_command_list_t *list) {
 
 	set_viewport_and_scissor(list);
 
+	vkResetDescriptorPool(device, desc_pools[current_buffer], 0);
+
 	onBackBuffer = true;
 
 	for (int i = 0; i < mrtIndex; ++i) {
@@ -859,9 +863,9 @@ void kinc_g5_command_list_set_vertex_constant_buffer(kinc_g5_command_list_t *lis
 void kinc_g5_command_list_set_fragment_constant_buffer(kinc_g5_command_list_t *list, struct kinc_g5_constant_buffer *buffer, int offset, size_t size) {
 	lastFragmentConstantBufferOffset = offset;
 
-	VkDescriptorSet descriptor_set = getDescriptorSet();
+	createDescriptorSet(&desc_set);
 	uint32_t offsets[2] = {lastVertexConstantBufferOffset, lastFragmentConstantBufferOffset};
-	vkCmdBindDescriptorSets(list->impl._buffer, VK_PIPELINE_BIND_POINT_GRAPHICS, currentPipeline->impl.pipeline_layout, 0, 1, &descriptor_set, 2, offsets);
+	vkCmdBindDescriptorSets(list->impl._buffer, VK_PIPELINE_BIND_POINT_GRAPHICS, currentPipeline->impl.pipeline_layout, 0, 1, &desc_set, 2, offsets);
 }
 
 void kinc_g5_command_list_set_pipeline_layout(kinc_g5_command_list_t *list) {}
diff --git a/Backends/Graphics5/Vulkan/Sources/kinc/backend/graphics5/indexbuffer.c.h b/Backends/Graphics5/Vulkan/Sources/kinc/backend/graphics5/indexbuffer.c.h
index ba7c1593..0bbc778a 100644
--- a/Backends/Graphics5/Vulkan/Sources/kinc/backend/graphics5/indexbuffer.c.h
+++ b/Backends/Graphics5/Vulkan/Sources/kinc/backend/graphics5/indexbuffer.c.h
@@ -21,6 +21,7 @@ void kinc_g5_index_buffer_init(kinc_g5_index_buffer_t *buffer, int indexCount, b
 	buf_info.usage = VK_BUFFER_USAGE_INDEX_BUFFER_BIT;
 #ifdef KORE_VKRT
 	buf_info.usage |= VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT;
+	buf_info.usage |= VK_BUFFER_USAGE_STORAGE_BUFFER_BIT;
 #endif
 	buf_info.flags = 0;
 
diff --git a/Backends/Graphics5/Vulkan/Sources/kinc/backend/graphics5/pipeline.c.h b/Backends/Graphics5/Vulkan/Sources/kinc/backend/graphics5/pipeline.c.h
index 3a3fab2e..6494ae24 100644
--- a/Backends/Graphics5/Vulkan/Sources/kinc/backend/graphics5/pipeline.c.h
+++ b/Backends/Graphics5/Vulkan/Sources/kinc/backend/graphics5/pipeline.c.h
@@ -2,6 +2,7 @@
 #include <kinc/graphics5/shader.h>
 
 extern VkDevice device;
+extern VkDescriptorSet desc_set;
 VkDescriptorSetLayout desc_layout;
 extern kinc_g5_texture_t *vulkanTextures[16];
 extern kinc_g5_render_target_t *vulkanRenderTargets[16];
@@ -9,7 +10,7 @@ extern uint32_t swapchainImageCount;
 extern uint32_t current_buffer;
 bool memory_type_from_properties(uint32_t typeBits, VkFlags requirements_mask, uint32_t *typeIndex);
 
-static VkDescriptorPool descriptor_pool;
+VkDescriptorPool desc_pools[3];
 
 static bool has_number(kinc_internal_named_number *named_numbers, const char *name) {
 	for (int i = 0; i < KINC_INTERNAL_NAMED_NUMBER_COUNT; ++i) {
@@ -689,15 +690,17 @@ void createDescriptorLayout() {
 		typeCounts[i].descriptorCount = 1;
 	}
 
-	VkDescriptorPoolCreateInfo pool_info = {0};
-	pool_info.sType = VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO;
-	pool_info.pNext = NULL;
-	pool_info.maxSets = 1024;
-	pool_info.poolSizeCount = 18;
-	pool_info.pPoolSizes = typeCounts;
+	VkDescriptorPoolCreateInfo descriptor_pool = {0};
+	descriptor_pool.sType = VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO;
+	descriptor_pool.pNext = NULL;
+	descriptor_pool.maxSets = 1024;
+	descriptor_pool.poolSizeCount = 18;
+	descriptor_pool.pPoolSizes = typeCounts;
 
-	err = vkCreateDescriptorPool(device, &pool_info, NULL, &descriptor_pool);
-	assert(!err);
+	for (int i = 0; i < 3; ++i) {
+		err = vkCreateDescriptorPool(device, &descriptor_pool, NULL, &desc_pools[i]);
+		assert(!err);
+	}
 }
 
 int calc_descriptor_id(void) {
@@ -726,22 +729,15 @@ struct destriptor_set {
 static struct destriptor_set descriptor_sets[MAX_DESCRIPTOR_SETS] = {0};
 static int descriptor_sets_count = 0;
 
-VkDescriptorSet getDescriptorSet() {
-	int id = calc_descriptor_id();
-	for (int i = 0; i < descriptor_sets_count; ++i) {
-		if (descriptor_sets[i].id == id) {
-			return descriptor_sets[i].set;
-		}
-	}
+void createDescriptorSet(VkDescriptorSet *desc_set) {
 
 	VkDescriptorSetAllocateInfo alloc_info = {0};
 	alloc_info.sType = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO;
 	alloc_info.pNext = NULL;
-	alloc_info.descriptorPool = descriptor_pool;
+	alloc_info.descriptorPool = desc_pools[current_buffer];
 	alloc_info.descriptorSetCount = 1;
 	alloc_info.pSetLayouts = &desc_layout;
-	VkDescriptorSet descriptor_set;
-	VkResult err = vkAllocateDescriptorSets(device, &alloc_info, &descriptor_set);
+	VkResult err = vkAllocateDescriptorSets(device, &alloc_info, desc_set);
 	assert(!err);
 
 	VkDescriptorBufferInfo buffer_descs[2];
@@ -788,14 +784,14 @@ VkDescriptorSet getDescriptorSet() {
 	memset(&writes, 0, sizeof(writes));
 
 	writes[0].sType = VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET;
-	writes[0].dstSet = descriptor_set;
+	writes[0].dstSet = *desc_set;
 	writes[0].dstBinding = 0;
 	writes[0].descriptorCount = 1;
 	writes[0].descriptorType = VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC;
 	writes[0].pBufferInfo = &buffer_descs[0];
 
 	writes[1].sType = VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET;
-	writes[1].dstSet = descriptor_set;
+	writes[1].dstSet = *desc_set;
 	writes[1].dstBinding = 1;
 	writes[1].descriptorCount = 1;
 	writes[1].descriptorType = VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC;
@@ -803,7 +799,7 @@ VkDescriptorSet getDescriptorSet() {
 
 	for (int i = 2; i < 18; ++i) {
 		writes[i].sType = VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET;
-		writes[i].dstSet = descriptor_set;
+		writes[i].dstSet = *desc_set;
 		writes[i].dstBinding = i;
 		writes[i].descriptorCount = 1;
 		writes[i].descriptorType = VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER;
@@ -823,11 +819,4 @@ VkDescriptorSet getDescriptorSet() {
 			vkUpdateDescriptorSets(device, 2, writes, 0, NULL);
 		}
 	}
-
-	assert(descriptor_sets_count + 1 < MAX_DESCRIPTOR_SETS);
-	descriptor_sets[descriptor_sets_count].id = id;
-	descriptor_sets[descriptor_sets_count].set = descriptor_set;
-	descriptor_sets_count += 1;
-
-	return descriptor_set;
 }
diff --git a/Backends/Graphics5/Vulkan/Sources/kinc/backend/graphics5/raytrace.c.h b/Backends/Graphics5/Vulkan/Sources/kinc/backend/graphics5/raytrace.c.h
index d36d44c8..421e2969 100644
--- a/Backends/Graphics5/Vulkan/Sources/kinc/backend/graphics5/raytrace.c.h
+++ b/Backends/Graphics5/Vulkan/Sources/kinc/backend/graphics5/raytrace.c.h
@@ -31,7 +31,16 @@ const char *miss_shader_name = "miss";
 VkDescriptorPool raytrace_descriptor_pool;
 kinc_raytrace_acceleration_structure_t *accel;
 kinc_raytrace_pipeline_t *pipeline;
-kinc_g5_texture_t *output = NULL;
+kinc_g5_render_target_t *output = NULL;
+kinc_g5_render_target_t *texpaint0;
+kinc_g5_render_target_t *texpaint1;
+kinc_g5_render_target_t *texpaint2;
+kinc_g5_texture_t *texenv;
+kinc_g5_texture_t *texsobol;
+kinc_g5_texture_t *texscramble;
+kinc_g5_texture_t *texrank;
+kinc_g5_vertex_buffer_t *vb;
+kinc_g5_index_buffer_t *ib;
 
 PFN_vkCreateRayTracingPipelinesKHR _vkCreateRayTracingPipelinesKHR = NULL;
 PFN_vkGetRayTracingShaderGroupHandlesKHR _vkGetRayTracingShaderGroupHandlesKHR = NULL;
@@ -45,6 +54,7 @@ PFN_vkCmdTraceRaysKHR _vkCmdTraceRaysKHR = NULL;
 
 void kinc_raytrace_pipeline_init(kinc_raytrace_pipeline_t *pipeline, kinc_g5_command_list_t *command_list, void *ray_shader, int ray_shader_size,
                                  kinc_g5_constant_buffer_t *constant_buffer) {
+	output = NULL;
 	pipeline->_constant_buffer = constant_buffer;
 
 	{
@@ -52,26 +62,93 @@ void kinc_raytrace_pipeline_init(kinc_raytrace_pipeline_t *pipeline, kinc_g5_com
 		acceleration_structure_layout_binding.binding = 0;
 		acceleration_structure_layout_binding.descriptorType = VK_DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_KHR;
 		acceleration_structure_layout_binding.descriptorCount = 1;
-		acceleration_structure_layout_binding.stageFlags = VK_SHADER_STAGE_RAYGEN_BIT_KHR;
+		acceleration_structure_layout_binding.stageFlags = VK_SHADER_STAGE_RAYGEN_BIT_KHR | VK_SHADER_STAGE_CLOSEST_HIT_BIT_KHR | VK_SHADER_STAGE_MISS_BIT_KHR;
 
 		VkDescriptorSetLayoutBinding result_image_layout_binding = {0};
-		result_image_layout_binding.binding = 1;
+		result_image_layout_binding.binding = 10;
 		result_image_layout_binding.descriptorType = VK_DESCRIPTOR_TYPE_STORAGE_IMAGE;
 		result_image_layout_binding.descriptorCount = 1;
-		result_image_layout_binding.stageFlags = VK_SHADER_STAGE_RAYGEN_BIT_KHR;
+		result_image_layout_binding.stageFlags = VK_SHADER_STAGE_RAYGEN_BIT_KHR | VK_SHADER_STAGE_CLOSEST_HIT_BIT_KHR | VK_SHADER_STAGE_MISS_BIT_KHR;
 
 		VkDescriptorSetLayoutBinding uniform_buffer_binding = {0};
-		uniform_buffer_binding.binding = 2;
+		uniform_buffer_binding.binding = 11;
 		uniform_buffer_binding.descriptorType = VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER;
 		uniform_buffer_binding.descriptorCount = 1;
-		uniform_buffer_binding.stageFlags = VK_SHADER_STAGE_RAYGEN_BIT_KHR;
-
-		VkDescriptorSetLayoutBinding bindings[3] = {acceleration_structure_layout_binding, result_image_layout_binding, uniform_buffer_binding};
+		uniform_buffer_binding.stageFlags = VK_SHADER_STAGE_RAYGEN_BIT_KHR | VK_SHADER_STAGE_CLOSEST_HIT_BIT_KHR | VK_SHADER_STAGE_MISS_BIT_KHR;
+
+		VkDescriptorSetLayoutBinding ib_binding = {0};
+		ib_binding.binding = 1;
+		ib_binding.descriptorType = VK_DESCRIPTOR_TYPE_STORAGE_BUFFER;
+		ib_binding.descriptorCount = 1;
+		ib_binding.stageFlags = VK_SHADER_STAGE_RAYGEN_BIT_KHR | VK_SHADER_STAGE_CLOSEST_HIT_BIT_KHR | VK_SHADER_STAGE_MISS_BIT_KHR;
+
+		VkDescriptorSetLayoutBinding vb_binding = {0};
+		vb_binding.binding = 2;
+		vb_binding.descriptorType = VK_DESCRIPTOR_TYPE_STORAGE_BUFFER;
+		vb_binding.descriptorCount = 1;
+		vb_binding.stageFlags = VK_SHADER_STAGE_RAYGEN_BIT_KHR | VK_SHADER_STAGE_CLOSEST_HIT_BIT_KHR | VK_SHADER_STAGE_MISS_BIT_KHR;
+
+		VkDescriptorSetLayoutBinding tex0_binding = {0};
+		tex0_binding.binding = 3;
+		tex0_binding.descriptorType = VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE;
+		tex0_binding.descriptorCount = 1;
+		tex0_binding.stageFlags = VK_SHADER_STAGE_RAYGEN_BIT_KHR | VK_SHADER_STAGE_CLOSEST_HIT_BIT_KHR | VK_SHADER_STAGE_MISS_BIT_KHR;
+
+		VkDescriptorSetLayoutBinding tex1_binding = {0};
+		tex1_binding.binding = 4;
+		tex1_binding.descriptorType = VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE;
+		tex1_binding.descriptorCount = 1;
+		tex1_binding.stageFlags = VK_SHADER_STAGE_RAYGEN_BIT_KHR | VK_SHADER_STAGE_CLOSEST_HIT_BIT_KHR | VK_SHADER_STAGE_MISS_BIT_KHR;
+
+		VkDescriptorSetLayoutBinding tex2_binding = {0};
+		tex2_binding.binding = 5;
+		tex2_binding.descriptorType = VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE;
+		tex2_binding.descriptorCount = 1;
+		tex2_binding.stageFlags = VK_SHADER_STAGE_RAYGEN_BIT_KHR | VK_SHADER_STAGE_CLOSEST_HIT_BIT_KHR | VK_SHADER_STAGE_MISS_BIT_KHR;
+
+		VkDescriptorSetLayoutBinding texenv_binding = {0};
+		texenv_binding.binding = 6;
+		texenv_binding.descriptorType = VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE;
+		texenv_binding.descriptorCount = 1;
+		texenv_binding.stageFlags = VK_SHADER_STAGE_RAYGEN_BIT_KHR | VK_SHADER_STAGE_CLOSEST_HIT_BIT_KHR | VK_SHADER_STAGE_MISS_BIT_KHR;
+
+		VkDescriptorSetLayoutBinding texsobol_binding = {0};
+		texsobol_binding.binding = 7;
+		texsobol_binding.descriptorType = VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE;
+		texsobol_binding.descriptorCount = 1;
+		texsobol_binding.stageFlags = VK_SHADER_STAGE_RAYGEN_BIT_KHR | VK_SHADER_STAGE_CLOSEST_HIT_BIT_KHR | VK_SHADER_STAGE_MISS_BIT_KHR;
+
+		VkDescriptorSetLayoutBinding texscramble_binding = {0};
+		texscramble_binding.binding = 8;
+		texscramble_binding.descriptorType = VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE;
+		texscramble_binding.descriptorCount = 1;
+		texscramble_binding.stageFlags = VK_SHADER_STAGE_RAYGEN_BIT_KHR | VK_SHADER_STAGE_CLOSEST_HIT_BIT_KHR | VK_SHADER_STAGE_MISS_BIT_KHR;
+
+		VkDescriptorSetLayoutBinding texrank_binding = {0};
+		texrank_binding.binding = 9;
+		texrank_binding.descriptorType = VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE;
+		texrank_binding.descriptorCount = 1;
+		texrank_binding.stageFlags = VK_SHADER_STAGE_RAYGEN_BIT_KHR | VK_SHADER_STAGE_CLOSEST_HIT_BIT_KHR | VK_SHADER_STAGE_MISS_BIT_KHR;
+
+		VkDescriptorSetLayoutBinding bindings[12] = {
+			acceleration_structure_layout_binding,
+			result_image_layout_binding,
+			uniform_buffer_binding,
+			vb_binding,
+			ib_binding,
+			tex0_binding,
+			tex1_binding,
+			tex2_binding,
+			texenv_binding,
+			texsobol_binding,
+			texscramble_binding,
+			texrank_binding
+		};
 
 		VkDescriptorSetLayoutCreateInfo layout_info = {0};
 		layout_info.sType = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO;
 		layout_info.pNext = NULL;
-		layout_info.bindingCount = 3;
+		layout_info.bindingCount = 12;
 		layout_info.pBindings = &bindings[0];
 		vkCreateDescriptorSetLayout(device, &layout_info, NULL, &pipeline->impl.descriptor_set_layout);
 
@@ -233,23 +310,50 @@ void kinc_raytrace_pipeline_init(kinc_raytrace_pipeline_t *pipeline, kinc_g5_com
 	}
 
 	{
-		VkDescriptorPoolSize type_counts[3];
+		VkDescriptorPoolSize type_counts[12];
 		memset(type_counts, 0, sizeof(type_counts));
 
 		type_counts[0].type = VK_DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_KHR;
 		type_counts[0].descriptorCount = 1;
 
-		type_counts[1].type = VK_DESCRIPTOR_TYPE_STORAGE_IMAGE;
+		type_counts[1].type = VK_DESCRIPTOR_TYPE_STORAGE_BUFFER;
 		type_counts[1].descriptorCount = 1;
 
-		type_counts[2].type = VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER;
+		type_counts[2].type = VK_DESCRIPTOR_TYPE_STORAGE_BUFFER;
 		type_counts[2].descriptorCount = 1;
 
+		type_counts[3].type = VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE;
+		type_counts[3].descriptorCount = 1;
+
+		type_counts[4].type = VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE;
+		type_counts[4].descriptorCount = 1;
+
+		type_counts[5].type = VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE;
+		type_counts[5].descriptorCount = 1;
+
+		type_counts[6].type = VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE;
+		type_counts[6].descriptorCount = 1;
+
+		type_counts[7].type = VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE;
+		type_counts[7].descriptorCount = 1;
+
+		type_counts[8].type = VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE;
+		type_counts[8].descriptorCount = 1;
+
+		type_counts[9].type = VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE;
+		type_counts[9].descriptorCount = 1;
+
+		type_counts[10].type = VK_DESCRIPTOR_TYPE_STORAGE_IMAGE;
+		type_counts[10].descriptorCount = 1;
+
+		type_counts[11].type = VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER;
+		type_counts[11].descriptorCount = 1;
+
 		VkDescriptorPoolCreateInfo descriptor_pool_create_info = {0};
 		descriptor_pool_create_info.sType = VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO;
 		descriptor_pool_create_info.pNext = NULL;
 		descriptor_pool_create_info.maxSets = 1024;
-		descriptor_pool_create_info.poolSizeCount = 3;
+		descriptor_pool_create_info.poolSizeCount = 12;
 		descriptor_pool_create_info.pPoolSizes = type_counts;
 
 		vkCreateDescriptorPool(device, &descriptor_pool_create_info, NULL, &raytrace_descriptor_pool);
@@ -278,8 +382,10 @@ uint64_t get_buffer_device_address(VkBuffer buffer) {
 	return _vkGetBufferDeviceAddressKHR(device, &buffer_device_address_info);
 }
 
-void kinc_raytrace_acceleration_structure_init(kinc_raytrace_acceleration_structure_t *accel, kinc_g5_command_list_t *command_list, kinc_g5_vertex_buffer_t *vb,
-                                               kinc_g5_index_buffer_t *ib) {
+void kinc_raytrace_acceleration_structure_init(kinc_raytrace_acceleration_structure_t *accel, kinc_g5_command_list_t *command_list, kinc_g5_vertex_buffer_t *_vb,
+                                               kinc_g5_index_buffer_t *_ib, float scale) {
+	vb = _vb;
+	ib = _ib;
 	_vkGetBufferDeviceAddressKHR = (void *)vkGetDeviceProcAddr(device, "vkGetBufferDeviceAddressKHR");
 	_vkCreateAccelerationStructureKHR = (void *)vkGetDeviceProcAddr(device, "vkCreateAccelerationStructureKHR");
 	_vkGetAccelerationStructureDeviceAddressKHR = (void *)vkGetDeviceProcAddr(device, "vkGetAccelerationStructureDeviceAddressKHR");
@@ -297,7 +403,7 @@ void kinc_raytrace_acceleration_structure_init(kinc_raytrace_acceleration_struct
 		acceleration_geometry.flags = VK_GEOMETRY_OPAQUE_BIT_KHR;
 		acceleration_geometry.geometryType = VK_GEOMETRY_TYPE_TRIANGLES_KHR;
 		acceleration_geometry.geometry.triangles.sType = VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_TRIANGLES_DATA_KHR;
-		acceleration_geometry.geometry.triangles.vertexFormat = VK_FORMAT_R32G32B32_SFLOAT;
+		acceleration_geometry.geometry.triangles.vertexFormat = VK_FORMAT_R16G16B16_SNORM;
 		acceleration_geometry.geometry.triangles.vertexData.deviceAddress = vertex_data_device_address.deviceAddress;
 		acceleration_geometry.geometry.triangles.vertexStride = vb->impl.myStride;
 		acceleration_geometry.geometry.triangles.indexType = VK_INDEX_TYPE_UINT32;
@@ -312,7 +418,7 @@ void kinc_raytrace_acceleration_structure_init(kinc_raytrace_acceleration_struct
 
 		VkAccelerationStructureBuildSizesInfoKHR acceleration_build_sizes_info = {0};
 		acceleration_build_sizes_info.sType = VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_SIZES_INFO_KHR;
-		const uint32_t primitive_count = 1;
+		const uint32_t primitive_count = ib->impl.myCount / 3;
 		_vkGetAccelerationStructureBuildSizesKHR(device, VK_ACCELERATION_STRUCTURE_BUILD_TYPE_DEVICE_KHR, &acceleration_structure_build_geometry_info,
 		                                         &primitive_count, &acceleration_build_sizes_info);
 
@@ -386,7 +492,7 @@ void kinc_raytrace_acceleration_structure_init(kinc_raytrace_acceleration_struct
 		acceleration_build_geometry_info.scratchData.deviceAddress = scratch_buffer_device_address;
 
 		VkAccelerationStructureBuildRangeInfoKHR acceleration_build_range_info = {0};
-		acceleration_build_range_info.primitiveCount = 1;
+		acceleration_build_range_info.primitiveCount = ib->impl.myCount / 3;
 		acceleration_build_range_info.primitiveOffset = 0x0;
 		acceleration_build_range_info.firstVertex = 0;
 		acceleration_build_range_info.transformOffset = 0x0;
@@ -441,7 +547,7 @@ void kinc_raytrace_acceleration_structure_init(kinc_raytrace_acceleration_struct
 	}
 
 	{
-		VkTransformMatrixKHR transform_matrix = {1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f};
+		VkTransformMatrixKHR transform_matrix = {scale, 0.0f, 0.0f, 0.0f, 0.0f, scale, 0.0f, 0.0f, 0.0f, 0.0f, scale, 0.0f};
 
 		VkAccelerationStructureInstanceKHR instance = {0};
 		instance.transform = transform_matrix;
@@ -508,7 +614,7 @@ void kinc_raytrace_acceleration_structure_init(kinc_raytrace_acceleration_struct
 
 		VkAccelerationStructureBuildSizesInfoKHR acceleration_build_sizes_info = {0};
 		acceleration_build_sizes_info.sType = VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_SIZES_INFO_KHR;
-		const uint32_t primitive_count = 1;
+		const uint32_t primitive_count = ib->impl.myCount / 3;
 		_vkGetAccelerationStructureBuildSizesKHR(device, VK_ACCELERATION_STRUCTURE_BUILD_TYPE_DEVICE_KHR, &acceleration_structure_build_geometry_info,
 		                                         &primitive_count, &acceleration_build_sizes_info);
 
@@ -580,7 +686,7 @@ void kinc_raytrace_acceleration_structure_init(kinc_raytrace_acceleration_struct
 		acceleration_build_geometry_info.scratchData.deviceAddress = scratch_buffer_device_address;
 
 		VkAccelerationStructureBuildRangeInfoKHR acceleration_build_range_info = {0};
-		acceleration_build_range_info.primitiveCount = 1;
+		acceleration_build_range_info.primitiveCount = ib->impl.myCount / 3;
 		acceleration_build_range_info.primitiveOffset = 0x0;
 		acceleration_build_range_info.firstVertex = 0;
 		acceleration_build_range_info.transformOffset = 0x0;
@@ -642,6 +748,16 @@ void kinc_raytrace_acceleration_structure_destroy(kinc_raytrace_acceleration_str
 	_vkDestroyAccelerationStructureKHR(device, accel->impl.top_level_acceleration_structure, NULL);
 }
 
+void kinc_raytrace_set_textures(kinc_g5_render_target_t *_texpaint0, kinc_g5_render_target_t *_texpaint1, kinc_g5_render_target_t *_texpaint2, kinc_g5_texture_t *_texenv, kinc_g5_texture_t *_texsobol, kinc_g5_texture_t *_texscramble, kinc_g5_texture_t *_texrank) {
+	texpaint0 = _texpaint0;
+	texpaint1 = _texpaint1;
+	texpaint2 = _texpaint2;
+	texenv = _texenv;
+	texsobol = _texsobol;
+	texscramble = _texscramble;
+	texrank = _texrank;
+}
+
 void kinc_raytrace_set_acceleration_structure(kinc_raytrace_acceleration_structure_t *_accel) {
 	accel = _accel;
 }
@@ -650,7 +766,57 @@ void kinc_raytrace_set_pipeline(kinc_raytrace_pipeline_t *_pipeline) {
 	pipeline = _pipeline;
 }
 
-void kinc_raytrace_set_target(kinc_g5_texture_t *_output) {
+void kinc_raytrace_set_target(kinc_g5_render_target_t *_output) {
+	if (_output != output) {
+		vkDestroyImage(device, _output->impl.sourceImage, NULL);
+
+		VkImageCreateInfo image = {0};
+		image.sType = VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO;
+		image.pNext = NULL;
+		image.imageType = VK_IMAGE_TYPE_2D;
+		image.format = _output->impl.format;
+		image.extent.width = _output->width;
+		image.extent.height = _output->height;
+		image.extent.depth = 1;
+		image.mipLevels = 1;
+		image.arrayLayers = 1;
+		image.samples = VK_SAMPLE_COUNT_1_BIT;
+		image.tiling = VK_IMAGE_TILING_OPTIMAL;
+		image.usage = VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT | VK_IMAGE_USAGE_SAMPLED_BIT | VK_IMAGE_USAGE_STORAGE_BIT;
+		image.flags = 0;
+
+		vkCreateImage(device, &image, NULL, &_output->impl.sourceImage);
+
+		vkBindImageMemory(device, _output->impl.sourceImage, _output->impl.sourceMemory, 0);
+
+		VkImageViewCreateInfo colorImageView = {0};
+		colorImageView.sType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO;
+		colorImageView.pNext = NULL;
+		colorImageView.viewType = VK_IMAGE_VIEW_TYPE_2D;
+		colorImageView.format = _output->impl.format;
+		colorImageView.flags = 0;
+		colorImageView.subresourceRange.aspectMask = VK_IMAGE_ASPECT_COLOR_BIT;
+		colorImageView.subresourceRange.baseMipLevel = 0;
+		colorImageView.subresourceRange.levelCount = 1;
+		colorImageView.subresourceRange.baseArrayLayer = 0;
+		colorImageView.subresourceRange.layerCount = 1;
+		colorImageView.image = _output->impl.sourceImage;
+		vkCreateImageView(device, &colorImageView, NULL, &_output->impl.sourceView);
+
+		VkImageView attachments[1];
+		attachments[0] = _output->impl.sourceView;
+
+		VkFramebufferCreateInfo fbufCreateInfo = {0};
+		fbufCreateInfo.sType = VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO;
+		fbufCreateInfo.pNext = NULL;
+		fbufCreateInfo.renderPass = _output->impl.renderPass;
+		fbufCreateInfo.attachmentCount = 1;
+		fbufCreateInfo.pAttachments = attachments;
+		fbufCreateInfo.width = _output->width;
+		fbufCreateInfo.height = _output->height;
+		fbufCreateInfo.layers = 1;
+		vkCreateFramebuffer(device, &fbufCreateInfo, NULL, &_output->impl.framebuffer);
+	}
 	output = _output;
 }
 
@@ -669,7 +835,7 @@ void kinc_raytrace_dispatch_rays(kinc_g5_command_list_t *command_list) {
 	acceleration_structure_write.descriptorType = VK_DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_KHR;
 
 	VkDescriptorImageInfo image_descriptor = {0};
-	image_descriptor.imageView = output->impl.texture.view;
+	image_descriptor.imageView = output->impl.sourceView;
 	image_descriptor.imageLayout = VK_IMAGE_LAYOUT_GENERAL;
 
 	VkDescriptorBufferInfo buffer_descriptor = {0};
@@ -681,7 +847,7 @@ void kinc_raytrace_dispatch_rays(kinc_g5_command_list_t *command_list) {
 	result_image_write.sType = VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET;
 	result_image_write.pNext = NULL;
 	result_image_write.dstSet = pipeline->impl.descriptor_set;
-	result_image_write.dstBinding = 1;
+	result_image_write.dstBinding = 10;
 	result_image_write.descriptorCount = 1;
 	result_image_write.descriptorType = VK_DESCRIPTOR_TYPE_STORAGE_IMAGE;
 	result_image_write.pImageInfo = &image_descriptor;
@@ -690,13 +856,145 @@ void kinc_raytrace_dispatch_rays(kinc_g5_command_list_t *command_list) {
 	uniform_buffer_write.sType = VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET;
 	uniform_buffer_write.pNext = NULL;
 	uniform_buffer_write.dstSet = pipeline->impl.descriptor_set;
-	uniform_buffer_write.dstBinding = 2;
+	uniform_buffer_write.dstBinding = 11;
 	uniform_buffer_write.descriptorCount = 1;
 	uniform_buffer_write.descriptorType = VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER;
 	uniform_buffer_write.pBufferInfo = &buffer_descriptor;
 
-	VkWriteDescriptorSet write_descriptor_sets[3] = {acceleration_structure_write, result_image_write, uniform_buffer_write};
-	vkUpdateDescriptorSets(device, 3, write_descriptor_sets, 0, VK_NULL_HANDLE);
+	VkDescriptorBufferInfo ib_descriptor = {0};
+	ib_descriptor.buffer = ib->impl.buf;
+	ib_descriptor.range = VK_WHOLE_SIZE;
+	ib_descriptor.offset = 0;
+
+	VkWriteDescriptorSet ib_write = {0};
+	ib_write.sType = VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET;
+	ib_write.pNext = NULL;
+	ib_write.dstSet = pipeline->impl.descriptor_set;
+	ib_write.dstBinding = 1;
+	ib_write.descriptorCount = 1;
+	ib_write.descriptorType = VK_DESCRIPTOR_TYPE_STORAGE_BUFFER;
+	ib_write.pBufferInfo = &ib_descriptor;
+
+	VkDescriptorBufferInfo vb_descriptor = {0};
+	vb_descriptor.buffer = vb->impl.vertices.buf;
+	vb_descriptor.range = VK_WHOLE_SIZE;
+	vb_descriptor.offset = 0;
+
+	VkWriteDescriptorSet vb_write = {0};
+	vb_write.sType = VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET;
+	vb_write.pNext = NULL;
+	vb_write.dstSet = pipeline->impl.descriptor_set;
+	vb_write.dstBinding = 2;
+	vb_write.descriptorCount = 1;
+	vb_write.descriptorType = VK_DESCRIPTOR_TYPE_STORAGE_BUFFER;
+	vb_write.pBufferInfo = &vb_descriptor;
+
+	VkDescriptorImageInfo tex0image_descriptor = {0};
+	tex0image_descriptor.imageView = texpaint0->impl.sourceView;
+	tex0image_descriptor.imageLayout = VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL;
+
+	VkWriteDescriptorSet tex0_image_write = {0};
+	tex0_image_write.sType = VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET;
+	tex0_image_write.pNext = NULL;
+	tex0_image_write.dstSet = pipeline->impl.descriptor_set;
+	tex0_image_write.dstBinding = 3;
+	tex0_image_write.descriptorCount = 1;
+	tex0_image_write.descriptorType = VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE;
+	tex0_image_write.pImageInfo = &tex0image_descriptor;
+
+	VkDescriptorImageInfo tex1image_descriptor = {0};
+	tex1image_descriptor.imageView = texpaint1->impl.sourceView;
+	tex1image_descriptor.imageLayout = VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL;
+
+	VkWriteDescriptorSet tex1_image_write = {0};
+	tex1_image_write.sType = VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET;
+	tex1_image_write.pNext = NULL;
+	tex1_image_write.dstSet = pipeline->impl.descriptor_set;
+	tex1_image_write.dstBinding = 4;
+	tex1_image_write.descriptorCount = 1;
+	tex1_image_write.descriptorType = VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE;
+	tex1_image_write.pImageInfo = &tex1image_descriptor;
+
+	VkDescriptorImageInfo tex2image_descriptor = {0};
+	tex2image_descriptor.imageView = texpaint2->impl.sourceView;
+	tex2image_descriptor.imageLayout = VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL;
+
+	VkWriteDescriptorSet tex2_image_write = {0};
+	tex2_image_write.sType = VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET;
+	tex2_image_write.pNext = NULL;
+	tex2_image_write.dstSet = pipeline->impl.descriptor_set;
+	tex2_image_write.dstBinding = 5;
+	tex2_image_write.descriptorCount = 1;
+	tex2_image_write.descriptorType = VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE;
+	tex2_image_write.pImageInfo = &tex2image_descriptor;
+
+	VkDescriptorImageInfo texenvimage_descriptor = {0};
+	texenvimage_descriptor.imageView = texenv->impl.texture.view;
+	texenvimage_descriptor.imageLayout = VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL;
+
+	VkWriteDescriptorSet texenv_image_write = {0};
+	texenv_image_write.sType = VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET;
+	texenv_image_write.pNext = NULL;
+	texenv_image_write.dstSet = pipeline->impl.descriptor_set;
+	texenv_image_write.dstBinding = 6;
+	texenv_image_write.descriptorCount = 1;
+	texenv_image_write.descriptorType = VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE;
+	texenv_image_write.pImageInfo = &texenvimage_descriptor;
+
+	VkDescriptorImageInfo texsobolimage_descriptor = {0};
+	texsobolimage_descriptor.imageView = texsobol->impl.texture.view;
+	texsobolimage_descriptor.imageLayout = VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL;
+
+	VkWriteDescriptorSet texsobol_image_write = {0};
+	texsobol_image_write.sType = VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET;
+	texsobol_image_write.pNext = NULL;
+	texsobol_image_write.dstSet = pipeline->impl.descriptor_set;
+	texsobol_image_write.dstBinding = 7;
+	texsobol_image_write.descriptorCount = 1;
+	texsobol_image_write.descriptorType = VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE;
+	texsobol_image_write.pImageInfo = &texsobolimage_descriptor;
+
+	VkDescriptorImageInfo texscrambleimage_descriptor = {0};
+	texscrambleimage_descriptor.imageView = texscramble->impl.texture.view;
+	texscrambleimage_descriptor.imageLayout = VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL;
+
+	VkWriteDescriptorSet texscramble_image_write = {0};
+	texscramble_image_write.sType = VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET;
+	texscramble_image_write.pNext = NULL;
+	texscramble_image_write.dstSet = pipeline->impl.descriptor_set;
+	texscramble_image_write.dstBinding = 8;
+	texscramble_image_write.descriptorCount = 1;
+	texscramble_image_write.descriptorType = VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE;
+	texscramble_image_write.pImageInfo = &texscrambleimage_descriptor;
+
+	VkDescriptorImageInfo texrankimage_descriptor = {0};
+	texrankimage_descriptor.imageView = texrank->impl.texture.view;
+	texrankimage_descriptor.imageLayout = VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL;
+
+	VkWriteDescriptorSet texrank_image_write = {0};
+	texrank_image_write.sType = VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET;
+	texrank_image_write.pNext = NULL;
+	texrank_image_write.dstSet = pipeline->impl.descriptor_set;
+	texrank_image_write.dstBinding = 9;
+	texrank_image_write.descriptorCount = 1;
+	texrank_image_write.descriptorType = VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE;
+	texrank_image_write.pImageInfo = &texrankimage_descriptor;
+
+	VkWriteDescriptorSet write_descriptor_sets[12] = {
+		acceleration_structure_write,
+		result_image_write,
+		uniform_buffer_write,
+		vb_write,
+		ib_write,
+		tex0_image_write,
+		tex1_image_write,
+		tex2_image_write,
+		texenv_image_write,
+		texsobol_image_write,
+		texscramble_image_write,
+		texrank_image_write
+	};
+	vkUpdateDescriptorSets(device, 12, write_descriptor_sets, 0, VK_NULL_HANDLE);
 
 	VkPhysicalDeviceRayTracingPipelinePropertiesKHR ray_tracing_pipeline_properties;
 	ray_tracing_pipeline_properties.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PIPELINE_PROPERTIES_KHR;
@@ -744,7 +1042,7 @@ void kinc_raytrace_dispatch_rays(kinc_g5_command_list_t *command_list) {
 
 void kinc_raytrace_copy(kinc_g5_command_list_t *command_list, kinc_g5_render_target_t *target, kinc_g5_texture_t *source) {
 
-	vkCmdEndRenderPass(command_list->impl._buffer);
+	/*vkCmdEndRenderPass(command_list->impl._buffer);
 
 	VkImageCopy copy_region = {0};
 	copy_region.srcSubresource.aspectMask = VK_IMAGE_ASPECT_COLOR_BIT;
@@ -764,7 +1062,7 @@ void kinc_raytrace_copy(kinc_g5_command_list_t *command_list, kinc_g5_render_tar
 		               VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL, 1, &copy_region);
 	}
 
-	vkCmdBeginRenderPass(command_list->impl._buffer, &currentRenderPassBeginInfo, VK_SUBPASS_CONTENTS_INLINE);
+	vkCmdBeginRenderPass(command_list->impl._buffer, &currentRenderPassBeginInfo, VK_SUBPASS_CONTENTS_INLINE);*/
 }
 
 #endif // KORE_VKRT
diff --git a/Backends/Graphics5/Vulkan/Sources/kinc/backend/graphics5/vertexbuffer.c.h b/Backends/Graphics5/Vulkan/Sources/kinc/backend/graphics5/vertexbuffer.c.h
index 4ce652a5..425a8752 100644
--- a/Backends/Graphics5/Vulkan/Sources/kinc/backend/graphics5/vertexbuffer.c.h
+++ b/Backends/Graphics5/Vulkan/Sources/kinc/backend/graphics5/vertexbuffer.c.h
@@ -54,6 +54,7 @@ void kinc_g5_vertex_buffer_init(kinc_g5_vertex_buffer_t *buffer, int vertexCount
 	buf_info.usage = VK_BUFFER_USAGE_VERTEX_BUFFER_BIT;
 #ifdef KORE_VKRT
 	buf_info.usage |= VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT;
+	buf_info.usage |= VK_BUFFER_USAGE_STORAGE_BUFFER_BIT;
 #endif
 	buf_info.flags = 0;
 
diff --git a/Sources/kinc/graphics5/raytrace.h b/Sources/kinc/graphics5/raytrace.h
index febbd4c2..27b74e04 100644
--- a/Sources/kinc/graphics5/raytrace.h
+++ b/Sources/kinc/graphics5/raytrace.h
@@ -35,12 +35,13 @@ typedef struct kinc_raytrace_acceleration_structure {
 } kinc_raytrace_acceleration_structure_t;
 
 KINC_FUNC void kinc_raytrace_acceleration_structure_init(kinc_raytrace_acceleration_structure_t *accel, struct kinc_g5_command_list *command_list,
-                                                         struct kinc_g5_vertex_buffer *vb, struct kinc_g5_index_buffer *ib);
+                                                         struct kinc_g5_vertex_buffer *vb, struct kinc_g5_index_buffer *ib, float scale);
 KINC_FUNC void kinc_raytrace_acceleration_structure_destroy(kinc_raytrace_acceleration_structure_t *accel);
 
+KINC_FUNC void kinc_raytrace_set_textures(struct kinc_g5_render_target *texpaint0, struct kinc_g5_render_target *texpaint1, struct kinc_g5_render_target *texpaint2, struct kinc_g5_texture *texenv, struct kinc_g5_texture *texsobol, struct kinc_g5_texture *texscramble, struct kinc_g5_texture *texrank);
 KINC_FUNC void kinc_raytrace_set_acceleration_structure(kinc_raytrace_acceleration_structure_t *accel);
 KINC_FUNC void kinc_raytrace_set_pipeline(kinc_raytrace_pipeline_t *pipeline);
-KINC_FUNC void kinc_raytrace_set_target(struct kinc_g5_texture *output);
+KINC_FUNC void kinc_raytrace_set_target(struct kinc_g5_render_target *output);
 KINC_FUNC void kinc_raytrace_dispatch_rays(struct kinc_g5_command_list *command_list);
 KINC_FUNC void kinc_raytrace_copy(struct kinc_g5_command_list *command_list, struct kinc_g5_render_target *target, struct kinc_g5_texture *source);
 
