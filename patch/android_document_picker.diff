diff --git a/Backends/System/Android/Java-Sources/tech/kinc/KincActivity.java b/Backends/System/Android/Java-Sources/tech/kinc/KincActivity.java
index 6678b2e7..30742be8 100644
--- a/Backends/System/Android/Java-Sources/tech/kinc/KincActivity.java
+++ b/Backends/System/Android/Java-Sources/tech/kinc/KincActivity.java
@@ -1,6 +1,7 @@
 package tech.kinc;
 
 import android.app.NativeActivity;
+import android.content.ContentResolver;
 import android.content.Context;
 import android.content.Intent;
 import android.content.pm.ApplicationInfo;
@@ -13,11 +14,23 @@ import android.os.Message;
 import android.os.Vibrator;
 import android.os.VibrationEffect;
 import android.os.Build;
+import android.view.DragAndDropPermissions;
+import android.view.DragEvent;
 import android.view.KeyEvent;
 import android.view.View;
 import android.view.WindowManager;
 import android.view.inputmethod.InputMethodManager;
 
+import static android.view.DragEvent.ACTION_DRAG_STARTED;
+import static android.view.DragEvent.ACTION_DROP;
+
+import java.io.File;
+import java.io.FileNotFoundException;
+import java.io.FileOutputStream;
+import java.io.IOException;
+import java.io.InputStream;
+import java.io.OutputStream;
+
 public class KincActivity extends NativeActivity implements KeyEvent.Callback {
 	private static KincActivity instance;
 	private InputMethodManager inputManager;
@@ -46,6 +59,24 @@ public class KincActivity extends NativeActivity implements KeyEvent.Callback {
         } catch (PackageManager.NameNotFoundException|NullPointerException e) {
             isDisabledStickyImmersiveMode = false;
         }
+
+		getWindow().getDecorView().setOnDragListener(
+			new View.OnDragListener() {
+				@Override
+				public boolean onDrag(View view, DragEvent dragEvent) {
+					switch(dragEvent.getAction()) {
+						case ACTION_DRAG_STARTED:
+							return true;
+						case ACTION_DROP:
+							DragAndDropPermissions dropPermissions = requestDragAndDropPermissions(dragEvent);
+							importFile(dragEvent.getClipData().getItemAt(0).getUri());
+							dropPermissions.release();
+							return true;
+					}
+					return false;
+				}
+			}
+		);
 	}
 
     private void hideSystemUI() {
@@ -157,4 +188,53 @@ public class KincActivity extends NativeActivity implements KeyEvent.Callback {
 	}
 
 	private native void nativeKincKeyPress(String chars);
+
+	private native void onAndroidFilePicked(String pickedPath);
+	private native String getMobileTitle();
+
+	@Override
+	protected void onActivityResult(int requestCode, int resultCode, Intent data) {
+		super.onActivityResult(requestCode, resultCode, data);
+		if (requestCode == 1 && resultCode == RESULT_OK && data != null) {
+			importFile(data.getData());
+		}
+	}
+
+	public static void pickFile() {
+		Intent intent = new Intent(Intent.ACTION_GET_CONTENT);
+		intent.setType("*/*");
+		getInstance().startActivityForResult(Intent.createChooser(intent, "Select File"), 1);
+	}
+
+	private void importFile(Uri pickedFile) {
+		ContentResolver resolver = getApplicationContext().getContentResolver();
+		try (InputStream is = resolver.openInputStream(pickedFile)) {
+			File dir = new File(getFilesDir() + "/" + getMobileTitle());
+			dir.mkdirs();
+			String[] path = pickedFile.getPath().split("/");
+
+			// Samsung files app removes extension from fileName
+			String[] filePath = { android.provider.MediaStore.Images.Media.DATA };
+			android.database.Cursor cursor = getContentResolver().query(pickedFile, filePath, null, null, null);
+			cursor.moveToFirst();
+			String pickedPath = cursor.getString(cursor.getColumnIndex(filePath[0]));
+			if (pickedPath != null) {
+				path = pickedPath.split("/");
+			}
+			cursor.close();
+
+			String fileName = path[path.length - 1];
+			String dst = getFilesDir() + "/" + getMobileTitle() + "/" + fileName;
+			try (OutputStream os = new FileOutputStream(dst)) {
+				byte[] buf = new byte[1024];
+				int len;
+				while ((len = is.read(buf)) > 0) {
+					os.write(buf, 0, len);
+				}
+				onAndroidFilePicked(dst);
+			}
+		}
+		catch (java.io.FileNotFoundException e) {}
+		catch (IOException e) {}
+	}
 }
