diff --git a/Backends/Graphics5/Metal/Sources/kinc/backend/graphics5/pipeline.m.h b/Backends/Graphics5/Metal/Sources/kinc/backend/graphics5/pipeline.m.h
index 5a86f0f9..b7501353 100644
--- a/Backends/Graphics5/Metal/Sources/kinc/backend/graphics5/pipeline.m.h
+++ b/Backends/Graphics5/Metal/Sources/kinc/backend/graphics5/pipeline.m.h
@@ -141,8 +141,14 @@ void kinc_g5_pipeline_compile(kinc_g5_pipeline_t *pipeline) {
 		    (pipeline->colorWriteMaskRed[i] ? MTLColorWriteMaskRed : 0) | (pipeline->colorWriteMaskGreen[i] ? MTLColorWriteMaskGreen : 0) |
 		    (pipeline->colorWriteMaskBlue[i] ? MTLColorWriteMaskBlue : 0) | (pipeline->colorWriteMaskAlpha[i] ? MTLColorWriteMaskAlpha : 0);
 	}
-	renderPipelineDesc.depthAttachmentPixelFormat = MTLPixelFormatInvalid;
-	renderPipelineDesc.stencilAttachmentPixelFormat = MTLPixelFormatInvalid;
+	if (pipeline->depthAttachmentBits > 0) {
+		renderPipelineDesc.depthAttachmentPixelFormat = MTLPixelFormatDepth32Float_Stencil8;
+		renderPipelineDesc.stencilAttachmentPixelFormat = MTLPixelFormatDepth32Float_Stencil8;
+	}
+	else {
+		renderPipelineDesc.depthAttachmentPixelFormat = MTLPixelFormatInvalid;
+		renderPipelineDesc.stencilAttachmentPixelFormat = MTLPixelFormatInvalid;
+	}
 
 	float offset = 0;
 	MTLVertexDescriptor *vertexDescriptor = [[MTLVertexDescriptor alloc] init];
@@ -217,43 +223,20 @@ void kinc_g5_pipeline_compile(kinc_g5_pipeline_t *pipeline) {
 	if (errors != nil) NSLog(@"%@", [errors localizedDescription]);
 	assert(pipeline->impl._pipeline && !errors);
 
-	renderPipelineDesc.depthAttachmentPixelFormat = MTLPixelFormatDepth32Float_Stencil8;
-	renderPipelineDesc.stencilAttachmentPixelFormat = MTLPixelFormatDepth32Float_Stencil8;
-	pipeline->impl._pipelineDepth = (__bridge_retained void *)[device newRenderPipelineStateWithDescriptor:renderPipelineDesc
-	                                                                                               options:MTLPipelineOptionBufferTypeInfo
-	                                                                                            reflection:&reflection
-	                                                                                                 error:&errors];
-	if (errors != nil) NSLog(@"%@", [errors localizedDescription]);
-	assert(pipeline->impl._pipelineDepth && !errors);
-
 	pipeline->impl._reflection = (__bridge_retained void *)reflection;
 
 	MTLDepthStencilDescriptor *depthStencilDescriptor = [MTLDepthStencilDescriptor new];
 	depthStencilDescriptor.depthCompareFunction = convert_compare_mode(pipeline->depthMode);
 	depthStencilDescriptor.depthWriteEnabled = pipeline->depthWrite;
 	pipeline->impl._depthStencil = (__bridge_retained void *)[device newDepthStencilStateWithDescriptor:depthStencilDescriptor];
-
-	depthStencilDescriptor.depthCompareFunction = MTLCompareFunctionAlways;
-	depthStencilDescriptor.depthWriteEnabled = false;
-	pipeline->impl._depthStencilNone = (__bridge_retained void *)[device newDepthStencilStateWithDescriptor:depthStencilDescriptor];
 }
 
 bool kinc_internal_current_render_target_has_depth(void);
 
 void kinc_g5_internal_pipeline_set(kinc_g5_pipeline_t *pipeline) {
 	id<MTLRenderCommandEncoder> encoder = getMetalEncoder();
-	if (kinc_internal_current_render_target_has_depth()) {
-		id<MTLRenderPipelineState> pipe = (__bridge id<MTLRenderPipelineState>)pipeline->impl._pipelineDepth;
-		[encoder setRenderPipelineState:pipe];
-		id<MTLDepthStencilState> depthStencil = (__bridge id<MTLDepthStencilState>)pipeline->impl._depthStencil;
-		[encoder setDepthStencilState:depthStencil];
-	}
-	else {
-		id<MTLRenderPipelineState> pipe = (__bridge id<MTLRenderPipelineState>)pipeline->impl._pipeline;
-		[encoder setRenderPipelineState:pipe];
-		id<MTLDepthStencilState> depthStencil = (__bridge id<MTLDepthStencilState>)pipeline->impl._depthStencilNone;
-		[encoder setDepthStencilState:depthStencil];
-	}
+	[encoder setRenderPipelineState:pipeline->impl._pipeline];
+	[encoder setDepthStencilState:pipeline->impl._depthStencil];
 	[encoder setFrontFacingWinding:MTLWindingClockwise];
 	[encoder setCullMode:convert_cull_mode(pipeline->cullMode)];
 }
