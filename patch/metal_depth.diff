diff --git a/Backends/Graphics5/Metal/Sources/kinc/backend/graphics5/pipeline.mm b/Backends/Graphics5/Metal/Sources/kinc/backend/graphics5/pipeline.mm
index b775c873..4397394a 100644
--- a/Backends/Graphics5/Metal/Sources/kinc/backend/graphics5/pipeline.mm
+++ b/Backends/Graphics5/Metal/Sources/kinc/backend/graphics5/pipeline.mm
@@ -128,8 +128,14 @@ void kinc_g5_pipeline_compile(kinc_g5_pipeline_t *pipeline) {
 			| (pipeline->colorWriteMaskBlue[i] ? MTLColorWriteMaskBlue : 0)
 			| (pipeline->colorWriteMaskAlpha[i] ? MTLColorWriteMaskAlpha : 0);
 	}
-	renderPipelineDesc.depthAttachmentPixelFormat = MTLPixelFormatInvalid;
-	renderPipelineDesc.stencilAttachmentPixelFormat = MTLPixelFormatInvalid;
+	if (pipeline->depthAttachmentBits > 0) {
+		renderPipelineDesc.depthAttachmentPixelFormat = MTLPixelFormatDepth32Float_Stencil8;
+		renderPipelineDesc.stencilAttachmentPixelFormat = MTLPixelFormatDepth32Float_Stencil8;
+	}
+	else {
+		renderPipelineDesc.depthAttachmentPixelFormat = MTLPixelFormatInvalid;
+		renderPipelineDesc.stencilAttachmentPixelFormat = MTLPixelFormatInvalid;
+	}

 	float offset = 0;
 	MTLVertexDescriptor* vertexDescriptor = [[MTLVertexDescriptor alloc] init];
@@ -145,7 +151,7 @@ void kinc_g5_pipeline_compile(kinc_g5_pipeline_t *pipeline) {
 			vertexDescriptor.attributes[index].bufferIndex = 0;
 			vertexDescriptor.attributes[index].offset = offset;
 		}
-		
+
 		switch (pipeline->inputLayout[0]->elements[i].data) {
 		case KINC_G4_VERTEX_DATA_FLOAT1:
 			if (index >= 0) {
@@ -196,41 +202,23 @@ void kinc_g5_pipeline_compile(kinc_g5_pipeline_t *pipeline) {
 	NSError* errors = nil;
 	MTLRenderPipelineReflection* reflection = nil;
 	id<MTLDevice> device = getMetalDevice();
-	
+
 	pipeline->impl._pipeline = [device newRenderPipelineStateWithDescriptor:renderPipelineDesc options:MTLPipelineOptionBufferTypeInfo reflection:&reflection error:&errors];
 	if (errors != nil) NSLog(@"%@", [errors localizedDescription]);
 	assert(pipeline->impl._pipeline && !errors);
-	
-	renderPipelineDesc.depthAttachmentPixelFormat = MTLPixelFormatDepth32Float_Stencil8;
-	renderPipelineDesc.stencilAttachmentPixelFormat = MTLPixelFormatDepth32Float_Stencil8;
-	pipeline->impl._pipelineDepth = [device newRenderPipelineStateWithDescriptor:renderPipelineDesc options:MTLPipelineOptionBufferTypeInfo reflection:&reflection error:&errors];
-	if (errors != nil) NSLog(@"%@", [errors localizedDescription]);
-	assert(pipeline->impl._pipelineDepth && !errors);
-	
+
 	pipeline->impl._reflection = reflection;

 	MTLDepthStencilDescriptor* depthStencilDescriptor = [MTLDepthStencilDescriptor new];
 	depthStencilDescriptor.depthCompareFunction = convert(pipeline->depthMode);
 	depthStencilDescriptor.depthWriteEnabled = pipeline->depthWrite;
 	pipeline->impl._depthStencil = [device newDepthStencilStateWithDescriptor:depthStencilDescriptor];
-	
-	depthStencilDescriptor.depthCompareFunction = MTLCompareFunctionAlways;
-	depthStencilDescriptor.depthWriteEnabled = false;
-	pipeline->impl._depthStencilNone = [device newDepthStencilStateWithDescriptor:depthStencilDescriptor];
 }

-extern "C" bool kinc_internal_current_render_target_has_depth();
-
 void kinc_g5_internal_pipeline_set(kinc_g5_pipeline_t *pipeline) {
 	id<MTLRenderCommandEncoder> encoder = getMetalEncoder();
-	if (kinc_internal_current_render_target_has_depth()) {
-		[encoder setRenderPipelineState:pipeline->impl._pipelineDepth];
-		[encoder setDepthStencilState:pipeline->impl._depthStencil];
-	}
-	else {
-		[encoder setRenderPipelineState:pipeline->impl._pipeline];
-		[encoder setDepthStencilState:pipeline->impl._depthStencilNone];
-	}
+	[encoder setRenderPipelineState:pipeline->impl._pipeline];
+	[encoder setDepthStencilState:pipeline->impl._depthStencil];
 	[encoder setFrontFacingWinding:MTLWindingClockwise];
 	[encoder setCullMode:convert(pipeline->cullMode)];
 }
