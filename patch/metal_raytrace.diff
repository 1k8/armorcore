diff --git a/Backends/Graphics5/Metal/Sources/kinc/backend/graphics5/raytrace.m.h b/Backends/Graphics5/Metal/Sources/kinc/backend/graphics5/raytrace.m.h
index eaa8c33c..eee6bf2e 100644
--- a/Backends/Graphics5/Metal/Sources/kinc/backend/graphics5/raytrace.m.h
+++ b/Backends/Graphics5/Metal/Sources/kinc/backend/graphics5/raytrace.m.h
@@ -8,7 +8,7 @@
 
 static kinc_raytrace_acceleration_structure_t *accel;
 static kinc_raytrace_pipeline_t *pipeline;
-static kinc_g5_texture_t *output = NULL;
+static kinc_g5_render_target_t *output = NULL;
 static kinc_g5_constant_buffer_t *constant_buf;
 
 id getMetalDevice(void);
@@ -19,8 +19,25 @@ NSMutableArray *_primitive_accels;
 id <MTLAccelerationStructure> _instance_accel;
 dispatch_semaphore_t _sem;
 
+static kinc_g5_render_target_t *_texpaint0;
+static kinc_g5_render_target_t *_texpaint1;
+static kinc_g5_render_target_t *_texpaint2;
+static kinc_g5_texture_t *_texenv;
+static kinc_g5_texture_t *_texsobol;
+static kinc_g5_texture_t *_texscramble;
+static kinc_g5_texture_t *_texrank;
+static kinc_g5_vertex_buffer_t *_vb;
+static kinc_g5_index_buffer_t *_ib;
+
+bool kinc_raytrace_supported() {
+	id<MTLDevice> device = getMetalDevice();
+	return device.supportsRaytracing;
+}
+
 void kinc_raytrace_pipeline_init(kinc_raytrace_pipeline_t *pipeline, kinc_g5_command_list_t *command_list, void *ray_shader, int ray_shader_size, kinc_g5_constant_buffer_t *constant_buffer) {
 	id<MTLDevice> device = getMetalDevice();
+	if (!device.supportsRaytracing) return;
+
 	constant_buf = constant_buffer;
 
 	NSError *error = nil;
@@ -77,19 +94,26 @@ id <MTLAccelerationStructure> create_acceleration_sctructure(MTLAccelerationStru
 	return compacted_acceleration_structure;
 }
 
-void kinc_raytrace_acceleration_structure_init(kinc_raytrace_acceleration_structure_t *accel, kinc_g5_command_list_t *command_list, kinc_g5_vertex_buffer_t *vb, kinc_g5_index_buffer_t *ib) {
+void kinc_raytrace_acceleration_structure_init(kinc_raytrace_acceleration_structure_t *accel, kinc_g5_command_list_t *command_list, kinc_g5_vertex_buffer_t *vb, kinc_g5_index_buffer_t *ib, float scale) {
+	id<MTLDevice> device = getMetalDevice();
+	if (!device.supportsRaytracing) return;
+
 #if !TARGET_OS_IPHONE
 	MTLResourceOptions options = MTLResourceStorageModeManaged;
 #else
 	MTLResourceOptions options = MTLResourceStorageModeShared;
 #endif
 
+	_vb = vb;
+	_ib = ib;
+
 	MTLAccelerationStructureTriangleGeometryDescriptor *descriptor = [MTLAccelerationStructureTriangleGeometryDescriptor descriptor];
 	descriptor.indexType = MTLIndexTypeUInt32;
 	descriptor.indexBuffer = (__bridge id<MTLBuffer>)ib->impl.metal_buffer;
 	descriptor.vertexBuffer = (__bridge id<MTLBuffer>)vb->impl.mtlBuffer;
 	descriptor.vertexStride = vb->impl.myStride;
 	descriptor.triangleCount = ib->impl.count / 3;
+	descriptor.vertexFormat = MTLAttributeFormatShort4Normalized;
 
 	MTLPrimitiveAccelerationStructureDescriptor *accel_descriptor = [MTLPrimitiveAccelerationStructureDescriptor descriptor];
 	accel_descriptor.geometryDescriptors = @[descriptor];
@@ -97,16 +121,15 @@ void kinc_raytrace_acceleration_structure_init(kinc_raytrace_acceleration_struct
 	_primitive_accels = [[NSMutableArray alloc] init];
 	[_primitive_accels addObject:acceleration_structure];
 
-	id<MTLDevice> device = getMetalDevice();
 	id <MTLBuffer> instance_buffer = [device newBufferWithLength:sizeof(MTLAccelerationStructureInstanceDescriptor) * 1 options:options];
 
 	MTLAccelerationStructureInstanceDescriptor *instance_descriptors = (MTLAccelerationStructureInstanceDescriptor *)instance_buffer.contents;
 	instance_descriptors[0].accelerationStructureIndex = 0;
 	instance_descriptors[0].options = MTLAccelerationStructureInstanceOptionOpaque;
 	instance_descriptors[0].mask = 1;
-	instance_descriptors[0].transformationMatrix.columns[0] = MTLPackedFloat3Make(1, 0, 0);
-	instance_descriptors[0].transformationMatrix.columns[1] = MTLPackedFloat3Make(0, 1, 0);
-	instance_descriptors[0].transformationMatrix.columns[2] = MTLPackedFloat3Make(0, 0, 1);
+	instance_descriptors[0].transformationMatrix.columns[0] = MTLPackedFloat3Make(scale, 0, 0);
+	instance_descriptors[0].transformationMatrix.columns[1] = MTLPackedFloat3Make(0, scale, 0);
+	instance_descriptors[0].transformationMatrix.columns[2] = MTLPackedFloat3Make(0, 0, scale);
 	instance_descriptors[0].transformationMatrix.columns[3] = MTLPackedFloat3Make(0, 0, 0);
 
 #if !TARGET_OS_IPHONE
@@ -124,6 +147,16 @@ void kinc_raytrace_acceleration_structure_destroy(kinc_raytrace_acceleration_str
 
 }
 
+void kinc_raytrace_set_textures(kinc_g5_render_target_t *texpaint0, kinc_g5_render_target_t *texpaint1, kinc_g5_render_target_t *texpaint2, kinc_g5_texture_t *texenv, kinc_g5_texture_t *texsobol, kinc_g5_texture_t *texscramble, kinc_g5_texture_t *texrank) {
+	_texpaint0 = texpaint0;
+	_texpaint1 = texpaint1;
+	_texpaint2 = texpaint2;
+	_texenv = texenv;
+	_texsobol = texsobol;
+	_texscramble = texscramble;
+	_texrank = texrank;
+}
+
 void kinc_raytrace_set_acceleration_structure(kinc_raytrace_acceleration_structure_t *_accel) {
 	accel = _accel;
 }
@@ -132,11 +165,14 @@ void kinc_raytrace_set_pipeline(kinc_raytrace_pipeline_t *_pipeline) {
 	pipeline = _pipeline;
 }
 
-void kinc_raytrace_set_target(kinc_g5_texture_t *_output) {
+void kinc_raytrace_set_target(kinc_g5_render_target_t *_output) {
 	output = _output;
 }
 
 void kinc_raytrace_dispatch_rays(kinc_g5_command_list_t *command_list) {
+	id<MTLDevice> device = getMetalDevice();
+	if (!device.supportsRaytracing) return;
+
 	dispatch_semaphore_wait(_sem, DISPATCH_TIME_FOREVER);
 
 	id<MTLCommandQueue> queue = getMetalQueue();
@@ -156,7 +192,16 @@ void kinc_raytrace_dispatch_rays(kinc_g5_command_list_t *command_list) {
 	id <MTLComputeCommandEncoder> compute_encoder = [command_buffer computeCommandEncoder];
 	[compute_encoder setBuffer: (__bridge id<MTLBuffer>)constant_buf->impl._buffer offset:0 atIndex:0];
 	[compute_encoder setAccelerationStructure:_instance_accel atBufferIndex:1];
+	[compute_encoder setBuffer: (__bridge id<MTLBuffer>)_ib->impl.metal_buffer offset:0 atIndex:2];
+	[compute_encoder setBuffer: (__bridge id<MTLBuffer>)_vb->impl.mtlBuffer offset:0 atIndex:3];
 	[compute_encoder setTexture:(__bridge id<MTLTexture>)output->impl._tex atIndex:0];
+	[compute_encoder setTexture:(__bridge id<MTLTexture>)_texpaint0->impl._tex atIndex:1];
+	[compute_encoder setTexture:(__bridge id<MTLTexture>)_texpaint1->impl._tex atIndex:2];
+	[compute_encoder setTexture:(__bridge id<MTLTexture>)_texpaint2->impl._tex atIndex:3];
+	[compute_encoder setTexture:(__bridge id<MTLTexture>)_texenv->impl._tex atIndex:4];
+	[compute_encoder setTexture:(__bridge id<MTLTexture>)_texsobol->impl._tex atIndex:5];
+	[compute_encoder setTexture:(__bridge id<MTLTexture>)_texscramble->impl._tex atIndex:6];
+	[compute_encoder setTexture:(__bridge id<MTLTexture>)_texrank->impl._tex atIndex:7];
 
 	for (id <MTLAccelerationStructure> primitive_accel in _primitive_accels)
 		[compute_encoder useResource:primitive_accel usage:MTLResourceUsageRead];
diff --git a/Backends/Graphics5/Metal/Sources/kinc/backend/graphics5/rendertarget.m.h b/Backends/Graphics5/Metal/Sources/kinc/backend/graphics5/rendertarget.m.h
index 89e79232..0049b8a6 100644
--- a/Backends/Graphics5/Metal/Sources/kinc/backend/graphics5/rendertarget.m.h
+++ b/Backends/Graphics5/Metal/Sources/kinc/backend/graphics5/rendertarget.m.h
@@ -45,7 +45,7 @@ static void render_target_init(kinc_g5_render_target_t *target, int width, int h
 	descriptor.pixelFormat = convert_format(format);
 	descriptor.arrayLength = 1;
 	descriptor.mipmapLevelCount = 1;
-	descriptor.usage = MTLTextureUsageRenderTarget | MTLTextureUsageShaderRead;
+	descriptor.usage = MTLTextureUsageRenderTarget | MTLTextureUsageShaderRead | MTLTextureUsageShaderWrite;
 	descriptor.resourceOptions = MTLResourceStorageModePrivate;
 
 	target->impl._tex = (__bridge_retained void *)[device newTextureWithDescriptor:descriptor];
diff --git a/Sources/kinc/graphics5/raytrace.h b/Sources/kinc/graphics5/raytrace.h
index 03d0ed56..4b894da6 100644
--- a/Sources/kinc/graphics5/raytrace.h
+++ b/Sources/kinc/graphics5/raytrace.h
@@ -26,6 +26,7 @@ typedef struct kinc_raytrace_pipeline {
 	kinc_raytrace_pipeline_impl_t impl;
 } kinc_raytrace_pipeline_t;
 
+KINC_FUNC bool kinc_raytrace_supported(void);
 KINC_FUNC void kinc_raytrace_pipeline_init(kinc_raytrace_pipeline_t *pipeline, struct kinc_g5_command_list *command_list, void *ray_shader, int ray_shader_size,
                                            struct kinc_g5_constant_buffer *constant_buffer);
 KINC_FUNC void kinc_raytrace_pipeline_destroy(kinc_raytrace_pipeline_t *pipeline);
@@ -35,12 +36,13 @@ typedef struct kinc_raytrace_acceleration_structure {
 } kinc_raytrace_acceleration_structure_t;
 
 KINC_FUNC void kinc_raytrace_acceleration_structure_init(kinc_raytrace_acceleration_structure_t *accel, struct kinc_g5_command_list *command_list,
-                                                         struct kinc_g5_vertex_buffer *vb, struct kinc_g5_index_buffer *ib);
+														 struct kinc_g5_vertex_buffer *vb, struct kinc_g5_index_buffer *ib, float scale);
 KINC_FUNC void kinc_raytrace_acceleration_structure_destroy(kinc_raytrace_acceleration_structure_t *accel);
+KINC_FUNC void kinc_raytrace_set_textures(struct kinc_g5_render_target *texpaint0, struct kinc_g5_render_target *texpaint1, struct kinc_g5_render_target *texpaint2, struct kinc_g5_texture *texenv, struct kinc_g5_texture *texsobol, struct kinc_g5_texture *texscramble, struct kinc_g5_texture *texrank);
 
 KINC_FUNC void kinc_raytrace_set_acceleration_structure(kinc_raytrace_acceleration_structure_t *accel);
 KINC_FUNC void kinc_raytrace_set_pipeline(kinc_raytrace_pipeline_t *pipeline);
-KINC_FUNC void kinc_raytrace_set_target(struct kinc_g5_texture *output);
+KINC_FUNC void kinc_raytrace_set_target(struct kinc_g5_render_target *output);
 KINC_FUNC void kinc_raytrace_dispatch_rays(struct kinc_g5_command_list *command_list);
 KINC_FUNC void kinc_raytrace_copy(struct kinc_g5_command_list *command_list, struct kinc_g5_render_target *target, struct kinc_g5_texture *source);
 
