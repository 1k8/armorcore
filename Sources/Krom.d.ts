declare type i8 = number;
declare type i16 = number;
declare type i32 = number;
declare type u8 = number;
declare type u16 = number;
declare type u32 = number;
declare type f32 = number;
declare type f64 = number;
declare type Image = any;
declare type VertexElement = any;
declare type VertexBuffer = any;

declare namespace Krom {

	function clear(flags: i32, color: i32, depth: f32, stencil: i32): void;
	function createShader(data: ArrayBuffer, type: i32): any;
	function createVertexShaderFromSource(source: string): any;
	function createFragmentShaderFromSource(source: string): any;
	function deleteShader(shader: any): any;
	function createPipeline(): any;
	function deletePipeline(pipeline: any): any;
	function compilePipeline(pipeline: any, structure0: any, structure1: any, structure2: any, structure3: any, length: i32, vertexShader: any, fragmentShader: any, geometryShader: any, state: any): void;
	function setPipeline(pipeline: any): void;
	function getConstantLocation(pipeline: any, name: string): any;
	function getTextureUnit(pipeline: any, name: string): any;
	function setTexture(stage: any, texture: any): void;
	function setRenderTarget(stage: any, renderTarget: any): void;
	function setTextureDepth(unit: any, texture: any): void;
	function setImageTexture(stage: any, texture: any): void;
	function setTextureParameters(texunit: any, uAddressing: i32, vAddressing: i32, minificationFilter: i32, magnificationFilter: i32, mipmapFilter: i32): void;
	function setTexture3DParameters(texunit: any, uAddressing: i32, vAddressing: i32, wAddressing: i32, minificationFilter: i32, magnificationFilter: i32, mipmapFilter: i32): void;
	function setTextureCompareMode(texunit: any, enabled: boolean): void;
	function setBool(location: any, value: boolean): void;
	function setInt(location: any, value: i32): void;
	function setFloat(location: any, value: f32): void;
	function setFloat2(location: any, value1: f32, value2: f32): void;
	function setFloat3(location: any, value1: f32, value2: f32, value3: f32): void;
	function setFloat4(location: any, value1: f32, value2: f32, value3: f32, value4: f32): void;
	function setFloats(location: any, values: ArrayBuffer): void;
	function setMatrix(location: any, matrix: ArrayBuffer): void;
	function setMatrix3(location: any, matrix: ArrayBuffer): void;

	function begin(renderTarget: Image, additionalRenderTargets: Image[]): void;
	function end(): void;
	function renderTargetsInvertedY(): boolean;
	function viewport(x: i32, y: i32, width: i32, height: i32): void;
	function scissor(x: i32, y: i32, width: i32, height: i32): void;
	function disableScissor(): void;
	function createRenderTarget(width: i32, height: i32, format: i32, depthBufferBits: i32, stencilBufferBits: i32): any;
	function createTexture(width: i32, height: i32, format: i32): any;
	function createTexture3D(width: i32, height: i32, depth: i32, format: i32): any;
	function createTextureFromBytes(data: ArrayBuffer, width: i32, height: i32, format: i32, readable: boolean): any;
	function createTextureFromBytes3D(data: ArrayBuffer, width: i32, height: i32, depth: i32, format: i32, readable: boolean): any;
	function createTextureFromEncodedBytes(data: ArrayBuffer, format: string, readable: boolean): any;
	function getTexturePixels(texture: any): ArrayBuffer;
	function getRenderTargetPixels(renderTarget: any, data: ArrayBuffer): void;
	function lockTexture(texture: any, level: i32): ArrayBuffer;
	function unlockTexture(texture: any): void;
	function generateTextureMipmaps(texture: any, levels: i32): void;
	function generateRenderTargetMipmaps(renderTarget: any, levels: i32): void;
	function setMipmaps(texture: any, mipmaps: Image[]): void;
	function setDepthStencilFrom(target: any, source: any): void;
	function clearTexture(target: any, x: i32, y: i32, z: i32, width: i32, height: i32, depth: i32, color: i32): void;
	function createIndexBuffer(count: i32): any;
	function deleteIndexBuffer(buffer: any): any;
	function lockIndexBuffer(buffer: any): Uint32Array;
	function unlockIndexBuffer(buffer: any): void;
	function setIndexBuffer(buffer: any): void;
	function createVertexBuffer(count: i32, structure: VertexElement[], usage: i32, instanceDataStepRate: i32): any;
	function deleteVertexBuffer(buffer: any): any;
	function lockVertexBuffer(buffer: any, start: i32, count: i32): ArrayBuffer;
	function unlockVertexBuffer(buffer: any, count: i32): void;
	function setVertexBuffer(buffer: any): void;
	function setVertexBuffers(vertexBuffers: VertexBuffer[]): void;
	function drawIndexedVertices(start: i32, count: i32): void;
	function drawIndexedVerticesInstanced(instanceCount: i32, start: i32, count: i32): void;

	function loadImage(file: string, readable: boolean): any;
	function unloadImage(image: Image): void;
	function loadBlob(file: string): ArrayBuffer;
	function loadUrl(url: string): void;
	function copyToClipboard(text: string): void;

	function loadSound(file: string): any;
	function unloadSound(sound: any): void;
	function playSound(sound: any, loop: boolean): void;
	function stopSound(sound: any): void;

	function init(title: string, width: i32, height: i32, vSync: boolean, windowMode: i32, windowFeatures: i32, x: i32, y: i32, frequency: i32): void;
	function setApplicationName(name: string): void;
	function log(v: any): void;
	function setCallback(callback: ()=>void): void;
	function setDropFilesCallback(callback: (file: string)=>void): void;
	function setCutCopyPasteCallback(cutCallback: ()=>string, copyCallback: ()=>string, pasteCallback: (text: string)=>void): void;
	function setApplicationStateCallback(foregroundCallback: ()=>void, resumeCallback: ()=>void, pauseCallback: ()=>void, backgroundCallback: ()=>void, shutdownCallback: ()=>void): void;
	function setKeyboardDownCallback(callback: (code: i32)=>void): void;
	function setKeyboardUpCallback(callback: (code: i32)=>void): void;
	function setKeyboardPressCallback(callback: (char_code: i32)=>void): void;
	function setMouseDownCallback(callback: (button: i32, x: i32, y: i32)=>void): void;
	function setMouseUpCallback(callback: (button: i32, x: i32, y: i32)=>void): void;
	function setMouseMoveCallback(callback: (x: i32, y: i32, mx: i32, my: i32)=>void): void;
	function setMouseWheelCallback(callback: (button: i32)=>void): void;
	function setTouchDownCallback(callback: (index: i32, x: i32, y: i32)=>void): void;
	function setTouchUpCallback(callback: (index: i32, x: i32, y: i32)=>void): void;
	function setTouchMoveCallback(callback: (index: i32, x: i32, y: i32)=>void): void;
	function setPenDownCallback(callback: (x: i32, y: i32, pressure: f32)=>void): void;
	function setPenUpCallback(callback: (x: i32, y: i32, pressure: f32)=>void): void;
	function setPenMoveCallback(callback: (x: i32, y: i32, pressure: f32)=>void): void;
	function setGamepadAxisCallback(callback: (gamepad: i32, axis: i32, value: f32)=>void): void;
	function setGamepadButtonCallback(callback: (gamepad: i32, button: i32, value: f32)=>void): void;
	function lockMouse(): void;
	function unlockMouse(): void;
	function canLockMouse(): boolean;
	function isMouseLocked(): boolean;
	function setMousePosition(x: i32, y: i32): void;
	function showMouse(show: boolean): void;
	function showKeyboard(show: boolean): void;
	function getTime(): f32;
	function windowWidth(): i32;
	function windowHeight(): i32;
	function setWindowTitle(title: string): void;
	function getWindowMode(): i32;
	function setWindowMode(mode: i32): void;
	function resizeWindow(width: i32, height: i32): void;
	function moveWindow(x: i32, y: i32): void;
	function screenDpi(): i32;
	function systemId(): string;
	function requestShutdown(): void;
	function displayCount(): i32;
	function displayWidth(index: i32): i32;
	function displayHeight(index: i32): i32;
	function displayX(index: i32): i32;
	function displayY(index: i32): i32;
	function displayFrequency(index: i32): i32;
	function displayIsPrimary(index: i32): boolean;
	function writeStorage(name: string, data: ArrayBuffer): void;
	function readStorage(name: string): ArrayBuffer;

	function fileSaveBytes(path: string, bytes: ArrayBuffer, length?: i32): void;
	function sysCommand(cmd: string, args?: string[]): i32;
	function savePath(): string;
	function getArgCount(): i32;
	function getArg(index: i32): string;
	function getFilesLocation(): string;
	function httpRequest(url: string, size: i32, callback: (_: ArrayBuffer)=>void): void;

	function g2_init(image_vert: ArrayBuffer, image_frag: ArrayBuffer, colored_vert: ArrayBuffer, colored_frag: ArrayBuffer, text_vert: ArrayBuffer, text_frag: ArrayBuffer): void;
	function g2_begin(): void;
	function g2_end(): void;
	function g2_draw_scaled_sub_image(image: Image, sx: f32, sy: f32, sw: f32, sh: f32, dx: f32, dy: f32, dw: f32, dh: f32): void;
	function g2_fill_triangle(x0: f32, y0: f32, x1: f32, y1: f32, x2: f32, y2: f32): void;
	function g2_fill_rect(x: f32, y: f32, width: f32, height: f32): void;
	function g2_draw_rect(x: f32, y: f32, width: f32, height: f32, strength: f32): void;
	function g2_draw_line(x0: f32, y0: f32, x1: f32, y1: f32, strength: f32): void;
	function g2_draw_string(text: string, x: f32, y: f32): void;
	function g2_set_font(font: any, size: i32): void;
	function g2_font_init(blob: ArrayBuffer, font_index: i32): any;
	function g2_font_13(blob: ArrayBuffer): any;
	function g2_font_set_glyphs(glyphs: i32[]): void;
	function g2_font_count(font: any): i32;
	function g2_font_height(font: any, size: i32): i32;
	function g2_string_width(font: any, size: i32, text: string): i32;
	function g2_set_bilinear_filter(bilinear: boolean): void;
	function g2_restore_render_target(): void;
	function g2_set_render_target(renderTarget: any): void;
	function g2_set_color(color: i32): void;
	function g2_set_pipeline(pipeline: any): void;
	function g2_set_transform(matrix: ArrayBuffer): void;
	function g2_fill_circle(cx: f32, cy: f32, radius: f32, segments: i32): void;
	function g2_draw_circle(cx: f32, cy: f32, radius: f32, segments: i32, strength: f32): void;
	function g2_draw_cubic_bezier(x: f32[], y: f32[], segments: i32, strength: f32): void;

	function setSaveAndQuitCallback(callback: (save: boolean)=>void): void;
	function setMouseCursor(id: i32): void;
	function delayIdleSleep(): void;
	function raytraceSupported(): boolean;
	function raytraceInit(shader: ArrayBuffer, vb: any, ib: any, scale: f32): void;
	function raytraceSetTextures(tex0: Image, tex1: Image, tex2: Image, texenv: any, tex_sobol: any, tex_scramble: any, tex_rank: any): void;
	function raytraceDispatchRays(target: any, cb: ArrayBuffer): void;
	function saveDialog(filterList: string, defaultPath: string): string;
	function openDialog(filterList: string, defaultPath: string, openMultiple: boolean): string[];
	function readDirectory(path: string, foldersOnly: boolean): string;
	function fileExists(path: string): boolean;
	function deleteFile(path: string): void;
	function inflate(bytes: ArrayBuffer, raw: boolean): ArrayBuffer;
	function deflate(bytes: ArrayBuffer, raw: boolean): ArrayBuffer;
	function writeJpg(path: string, bytes: ArrayBuffer, w: i32, h: i32, format: i32, quality: i32): void; // RGBA, R, RGB1, RRR1, GGG1, BBB1, AAA1
	function writePng(path: string, bytes: ArrayBuffer, w: i32, h: i32, format: i32): void;
	function encodeJpg(bytes: ArrayBuffer, w: i32, h: i32, format: i32, quality: i32): ArrayBuffer;
	function encodePng(bytes: ArrayBuffer, w: i32, h: i32, format: i32): ArrayBuffer;
	function windowX(): i32;
	function windowY(): i32;
	function language(): string;
	function mlInference(model: ArrayBuffer, tensors: ArrayBuffer[], inputShape?: i32[][], outputShape?: i32[], useGpu?: boolean): ArrayBuffer;
	function mlUnload(): void;

	function io_obj_parse(file_bytes: ArrayBuffer, split_code: i32, start_pos: i32, udim: boolean): any;

	function zui_init(ops: any): any;
	function zui_get_scale(ui: any): f32;
	function zui_set_scale(ui: any, factor: f32): void;
	function zui_set_font(ui: any, font: any): void;
	function zui_begin(ui: any): void;
	function zui_end(last: boolean): void;
	function zui_begin_region(ui: any, x: i32, y: i32, w: i32): void;
	function zui_end_region(last: boolean): void;
	function zui_begin_sticky(): void;
	function zui_end_sticky(): void;
	function zui_end_input(): void;
	function zui_end_window(bind_global_g: boolean): void;
	function zui_end_element(element_size: f32): void;
	function zui_start_text_edit(handle: any, align: i32): void;
	function zui_input_in_rect(x: f32, y: f32, w: f32, h: f32): boolean;
	function zui_window(handle: any, x: i32, y: i32, w: i32, h: i32, drag: boolean): boolean;
	function zui_button(text: string, align: i32, label: string): boolean;
	function zui_check(handle: any, text: string, label: string): boolean;
	function zui_radio(handle: any, position: i32, text: string, label: string): boolean;
	function zui_combo(handle: any, texts: string[], label: string, show_label: boolean, align: i32, search_bar: boolean): i32;
	function zui_slider(handle: any, text: string, from: f32, to: f32, filled: boolean, precision: f32, display_value: boolean, align: i32, text_edit: boolean): f32;
	function zui_image(image: Image, tint: i32, h: i32, sx: i32, sy: i32, sw: i32, sh: i32): i32;
	function zui_text(text: string, align: i32, bg: i32): i32;
	function zui_text_input(handle: any, label: string, align: i32, editable: boolean, live_update: boolean): string;
	function zui_tab(handle: any, text: string, vertical: boolean, color: i32): boolean;
	function zui_panel(handle: any, text: string, isTree: boolean, filled: boolean, pack: boolean): boolean;
	function zui_handle(ops: any): any;
	function zui_separator(h: i32, fill: boolean): void;
	function zui_tooltip(text: string): void;
	function zui_tooltip_image(image: Image, max_width: i32): void;
	function zui_row(ratios: f32[]): void;
	function zui_fill(x: f32, y: f32, w: f32, h: f32, color: i32): void;
	function zui_rect(x: f32, y: f32, w: f32, h: f32, color: i32, strength: f32): void;
	function zui_draw_rect(fill: boolean, x: f32, y: f32, w: f32, h: f32, strength: f32): void;
	function zui_draw_string(text: string, x_offset: f32, y_offset: f32, align: i32, truncation: boolean): void;
	function zui_get_hovered_tab_name(): string;
	function zui_set_hovered_tab_name(name: string): void;
	function zui_begin_menu(): void;
	function zui_end_menu(): void;
	function zui_menu_button(text: string): boolean;
	function zui_float_input(handle: any, label: string, align: i32, precision: f32): f32;
	function zui_inline_radio(handle: any, texts: string[], align: i32): i32;
	function zui_color_wheel(handle: any, alpha: boolean, w: f32, h: f32, color_preview: boolean, picker: ()=>void): i32;
	function zui_text_area(handle: any, align: i32, editable: boolean, label: string, word_wrap: boolean): string;
	function zui_text_area_coloring(packed: ArrayBuffer): void;
	function zui_nodes_init(): any;
	function zui_node_canvas(nodes: any, packed: ArrayBuffer): ArrayBuffer;
	function zui_nodes_rgba_popup(handle: any, val: ArrayBuffer, x: i32, y: i32): void;
	function zui_nodes_scale(): f32;
	function zui_nodes_pan_x(): f32;
	function zui_nodes_pan_y(): f32;
	function zui_get(ui: any, name: string): any;
	function zui_set(ui: any, name: string, val: any): void;
	function zui_handle_get(handle: any, name: string): any;
	function zui_handle_set(handle: any, name: string, val: any): void;
	function zui_handle_ptr(handle: any): i32;
	function zui_theme_init(): any;
	function zui_theme_get(theme: any, name: string): any;
	function zui_theme_set(theme: any, name: string, val: any): void;
	function zui_nodes_get(nodes: any, name: string): any;
	function zui_nodes_set(nodes: any, name: string, val: any): void;
	function zui_set_on_border_hover(f: (handle: any, side: i32)=>void): void;
	function zui_set_on_text_hover(f: ()=>void): void;
	function zui_set_on_deselect_text(f: ()=>void): void;
	function zui_set_on_tab_drop(f: (to_handle: any, to_position: i32, from_handle: any, from_position: i32)=>void): void;
	function zui_nodes_set_enum_texts(f: (node_type: string)=>string[]): void;
	function zui_nodes_set_on_custom_button(f: (node_id: i32, button_name: string)=>void): void;
	function zui_nodes_set_on_canvas_control(f: ()=>any): void;
	function zui_nodes_set_on_canvas_released(f: ()=>void): void;
	function zui_nodes_set_on_socket_released(f: (socket_id: i32)=>void): void;
	function zui_nodes_set_on_link_drag(f: (link_drag_id: i32, is_new_link: boolean)=>void): void;
}
